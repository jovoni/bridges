for (ps in pseudos) {
cell_df = cell_df %>%
dplyr::rowwise() %>%
dplyr::mutate(parent_id = ifelse(is.na(parent_id) & grepl(cell_id, ps, fixed = TRUE), ps, parent_id)) %>%
dplyr::ungroup()
cell_df = dplyr::bind_rows(
cell_df,
dplyr::tibble(cell_id = ps, parent_id = NA, type = "pseudo")
)
}
}
unique_pseudo_cells = c(cell_df$cell_id, cell_df$parent_id)[grepl("|", c(cell_df$cell_id, cell_df$parent_id), fixed = TRUE)]
pseudo_cells_id_mapping = structure(
as.numeric(factor(unique_pseudo_cells)),
names = unique_pseudo_cells
)
cell_df$cell_id = lapply(1:nrow(cell_df), function(i) {
if (cell_df[i,]$type == "pseudo") {
paste0("p", pseudo_cells_id_mapping[[cell_df[i,]$cell_id]])
} else {
cell_df[i,]$cell_id
}
}) %>% unlist()
cell_df$parent_id = lapply(1:nrow(cell_df), function(i) {
if (grepl("|", cell_df[i,]$parent_id, fixed = TRUE)) {
paste0("p", pseudo_cells_id_mapping[[cell_df[i,]$parent_id]])
} else {
cell_df[i,]$parent_id
}
}) %>% unlist()
reconstructed_newick = tibble_to_newick(cell_df)
reconstructed_tree = ape::read.tree(text = reconstructed_newick)
reconstructed_tree_plot = ggtree::ggtree(reconstructed_tree) +
ggtree::geom_tippoint() +
ggtree::geom_tiplab(hjust = 1, offset = 1) +
ggplot2::ggtitle("Reconstructed tree")
reconstructed_tree_plot
get_tree_metrics(true_newick_tree, reconstructed_newick)
true_tree_plot | reconstructed_tree_plot
setwd("~/Github/bridges")
devtools::document()
devtools::load_all()
rm(list = ls())
require(bridges)
require(patchwork)
L = 100
sim = gillespie_sim(initial_cells = 1, death_rate = 0, max_cells = 8, bfb_prob = .5, initial_sequence_length = L, first_round_of_bfb = T)
sim$cell_lifetimes
sim$newick_tree
sim$newick_tree
tree <- read.tree(text = sim$newick_tree)
tree <- ape::read.tree(text = sim$newick_tree)
tree
ggtree(tree, aes(color = bfb)) +
scale_color_manual(values = c("0" = "blue", "1" = "red"))
ggtree::ggtree(tree, aes(color = bfb)) +
scale_color_manual(values = c("0" = "blue", "1" = "red"))
require(ggplot2)
ggtree::ggtree(tree, aes(color = bfb)) +
scale_color_manual(values = c("0" = "blue", "1" = "red"))
tree
tree$edge
tree$node.label
tree$tip.label
tree$Nnode
sim$newick_tree
plot(tree)
sim$cell_lifetimes
rm(list = ls())
require(bridges)
require(patchwork)
source("utils_MFNJ.R")
source("mfnj.R")
rm(list = ls())
require(bridges)
require(patchwork)
L = 100
sim = gillespie_sim(
initial_cells = 1,
death_rate = 0,
max_cells = 8,
bfb_prob = .25,
initial_sequence_length = L,
first_round_of_bfb = T,
selection_rate = 0,
breakpoint_support = "beta",
alpha = 10,
beta = 10,
hotspot = 90
)
library(dplyr)
library(ape)
library(ggtree)
# Revised function to create a tree with explicit BFB information
tibble_to_phylo <- function(cell_data) {
# Ensure parent_id is properly set
cell_data$parent_id[is.na(cell_data$parent_id)] <- "cell_0"
# Add root if not present
if (!"cell_0" %in% cell_data$cell_id) {
root_row <- tibble(
cell_id = "cell_0",
parent_id = NA,
bfb_event = FALSE,
birth_time = 0,
death_time = 0
)
cell_data <- bind_rows(root_row, cell_data)
}
# Create edge matrix
edge_matrix <- cell_data %>%
filter(!is.na(parent_id)) %>%
mutate(
parent_node = match(parent_id, cell_data$cell_id),
child_node = match(cell_id, cell_data$cell_id)
) %>%
select(parent_node, child_node)
# Create phylo object
tree <- list(
edge = as.matrix(edge_matrix),
tip.label = cell_data$cell_id,
Nnode = sum(cell_data$cell_id != cell_data$parent_id),
bfb_event = cell_data$bfb_event
)
class(tree) <- "phylo"
return(tree)
}
# Prepare the data
# Assuming cell_lifetimes is your original dataframe
cell_lifetimes = sim$cell_lifetimes
cell_lifetimes$parent_id[is.na(cell_lifetimes$parent_id)] <- "cell_0"
# Convert to phylo object
tree <- tibble_to_phylo(cell_lifetimes)
tree
cell_lifetimes
# Prepare the data
# Assuming cell_lifetimes is your original dataframe
cell_lifetimes = dplyr::bind_rows(
dplyr::tibble(
cell_id = "cell_0",
birth_time = 0,
death_time = 0,
lifetime = 0,
is_alive = FALSE,
parent_id = NA,
bfb_event = FALSE,
hotspot_gained = FALSE
),
sim$cell_lifetimes
)
cell_lifetimes$parent_id[is.na(cell_lifetimes$parent_id)] <- "cell_0"
# Convert to phylo object
tree <- tibble_to_phylo(cell_lifetimes)
tree
cell_lifetimes
# Revised function to create a tree with explicit BFB information
cell_data = cell_lifetimes
# Ensure parent_id is properly set
cell_data$parent_id[is.na(cell_data$parent_id)] <- "cell_0"
cell_data
cell_data$parent_id[is.na(cell_data$parent_id)] <- "cell_0"
cell_data
# Prepare the data
# Assuming cell_lifetimes is your original dataframe
cell_lifetimes = sim$cell_lifetimes
# Prepare the data
# Assuming cell_lifetimes is your original dataframe
cell_lifetimes = sim$cell_lifetimes
cell_lifetimes
cell_lifetimes$parent_id[is.na(cell_lifetimes$parent_id)] <- "cell_0"
# Ensure parent_id is properly set
cell_data$parent_id[is.na(cell_data$parent_id)] <- "cell_0"
# Add root if not present
if (!"cell_0" %in% cell_data$cell_id) {
root_row <- tibble(
cell_id = "cell_0",
parent_id = NA,
bfb_event = FALSE,
birth_time = 0,
death_time = 0
)
cell_data <- bind_rows(root_row, cell_data)
}
cell_data
cell_data
# Create edge matrix
edge_matrix <- cell_data %>%
filter(!is.na(parent_id)) %>%
mutate(
parent_node = match(parent_id, cell_data$cell_id),
child_node = match(cell_id, cell_data$cell_id)
) %>%
select(parent_node, child_node)
edge_matrix
# Create phylo object
tree <- list(
edge = as.matrix(edge_matrix),
tip.label = cell_data$cell_id,
Nnode = sum(cell_data$cell_id != cell_data$parent_id),
bfb_event = cell_data$bfb_event
)
tree
class(tree) <- "phylo"
ggtree(tree, aes(color = tree$bfb_event))
ggtree(tree, aes(color = tree$bfb_event)) +
scale_color_manual(values = c("FALSE" = "blue", "TRUE" = "red"),
name = "BFB Event")
# Plot with ggtree
plot(tree)
p <- ggtree(tree, aes(color = tree$bfb_event)) +
scale_color_manual(values = c("FALSE" = "blue", "TRUE" = "red"),
name = "BFB Event") +
geom_tiplab() +
theme(legend.position = "right")
tree
cell_data
# Prepare the data
# Assuming cell_lifetimes is your original dataframe
cell_lifetimes = sim$cell_lifetimes
cell_lifetimes
# Prepare the data
# Assuming cell_lifetimes is your original dataframe
cell_data = cell_lifetimes = sim$cell_lifetimes
# Ensure parent_id is properly set
cell_data$parent_id[is.na(cell_data$parent_id)] <- "cell_0"
cell_data
# Add root if not present
if (!"cell_0" %in% cell_data$cell_id) {
root_row <- tibble(
cell_id = "cell_0",
parent_id = NA,
bfb_event = FALSE,
birth_time = 0,
death_time = 0
)
cell_data <- bind_rows(root_row, cell_data)
}
cell_data
# Create edge matrix
edge_matrix <- cell_data %>%
filter(!is.na(parent_id)) %>%
mutate(
parent_node = match(parent_id, cell_data$cell_id),
child_node = match(cell_id, cell_data$cell_id)
) %>%
select(parent_node, child_node)
# Create phylo object
tree <- list(
edge = as.matrix(edge_matrix),
tip.label = cell_data$cell_id,
Nnode = sum(cell_data$cell_id != cell_data$parent_id),
bfb_event = cell_data$bfb_event
)
tree
class(tree) <- "phylo"
tree
devtools::document()
devtools::load_all()
devtools::document()
setwd("~/Github/bridges")
devtools::document()
devtools::load_all()
rm(list = ls())
require(bridges)
require(patchwork)
L = 100
sim = gillespie_sim(
initial_cells = 1,
death_rate = 0,
max_cells = 8,
bfb_prob = .25,
initial_sequence_length = L,
first_round_of_bfb = T,
selection_rate = 0,
breakpoint_support = "beta",
alpha = 10,
beta = 10,
hotspot = 90
)
library(dplyr)
library(ape)
library(ggtree)
# Revised function to create a tree with explicit BFB information
tibble_to_phylo <- function(cell_data) {
# Ensure parent_id is properly set
cell_data$parent_id[is.na(cell_data$parent_id)] <- "cell_0"
# Add root if not present
if (!"cell_0" %in% cell_data$cell_id) {
root_row <- tibble(
cell_id = "cell_0",
parent_id = NA,
bfb_event = FALSE,
birth_time = 0,
death_time = 0
)
cell_data <- bind_rows(root_row, cell_data)
}
# Create edge matrix
edge_matrix <- cell_data %>%
filter(!is.na(parent_id)) %>%
mutate(
parent_node = match(parent_id, cell_data$cell_id),
child_node = match(cell_id, cell_data$cell_id)
) %>%
select(parent_node, child_node)
# Create phylo object
tree <- list(
edge = as.matrix(edge_matrix),
tip.label = cell_data$cell_id,
Nnode = sum(cell_data$cell_id != cell_data$parent_id),
bfb_event = cell_data$bfb_event
)
class(tree) <- "phylo"
return(tree)
}
sim$newick_tree
tree = ape::read.tree(text = sim$newick_tree)
tree
p<-ggtree(tree)
p
p+geom_tiplab()
p + geom_tiplab() +
geom_cladelab()
p + geom_tiplab() +
geom_nodelab()
sim$newick_tree
newick_tree = sim$newick_tree
tree <- read.tree(text = newick_tree)
# Extract the bfb annotations from node names
node_names <- tree$node.label
node_names
bfb_values <- sapply(strsplit(node_names, "\\[&bfb="), function(x) {
if (length(x) > 1) {
as.numeric(gsub("\\].*", "", x[2]))
} else {
NA
}
})
bfb_values
node_names
# Read the tree
tree <- read.tree(text = newick_tree)
# Extract all node labels (tips and internal nodes)
all_labels <- c(tree$tip.label, tree$node.label)
all_labels
# Extract bfb values for all nodes
bfb_values <- sapply(all_labels, function(x) {
if (grepl("\\[&bfb=", x)) {
as.numeric(gsub(".*\\[&bfb=([01])\\].*", "\\1", x))
} else {
NA
}
})
bfb_values
all_labels
tree$node.label
tree$tip.label
bfb_values <- sapply(all_labels, function(x) {
if (grepl("\\[&bfb=", x)) {
as.numeric(gsub(".*\\[&bfb=([01])\\].*", "\\1", x))
} else {
NA
}
})
# Create a data frame mapping node numbers to bfb values
node_data <- data.frame(
node = 1:length(all_labels),
label = all_labels,
bfb = bfb_values
)
# Get edge information from the tree
edge_df <- as.data.frame(tree$edge) %>%
rename(parent = V1, node = V2) %>%
left_join(node_data, by = "node") %>%
select(parent, node, bfb)
edge_df
# Plot the tree with edges colored by child node's bfb value
ggtree(tree) %<+% node_data +
geom_edge(aes(color = factor(bfb)), size = 1.5) +
geom_tiplab(align = TRUE, linesize = .5) +
geom_nodelab(aes(label = label), size = 3, hjust = -0.1) +
scale_edge_color_manual(
values = c("0" = "blue", "1" = "red"),
na.value = "gray",
name = "BFB Value"
) +
theme(legend.position = "right") +
ggtitle("Tree with edges colored by child node's BFB value")
library(ape)
library(ggtree)
library(ggplot2)
library(dplyr)
L = 100
sim = gillespie_sim(
initial_cells = 1,
death_rate = 0,
max_cells = 8,
bfb_prob = .25,
initial_sequence_length = L,
first_round_of_bfb = T,
selection_rate = 0,
breakpoint_support = "beta",
alpha = 10,
beta = 10,
hotspot = 90
)
newick_tree = sim$newick_tree
# Read the tree
tree <- read.tree(text = newick_tree)
# Extract all node labels (tips and internal nodes)
all_labels <- c(tree$tip.label, tree$node.label)
bfb_values <- sapply(all_labels, function(x) {
if (grepl("\\[&bfb=", x)) {
as.numeric(gsub(".*\\[&bfb=([01])\\].*", "\\1", x))
} else {
NA
}
})
# Create a data frame mapping node numbers to bfb values
node_data <- data.frame(
node = 1:length(all_labels),
label = all_labels,
bfb = bfb_values
)
# Get edge information from the tree
edge_df <- as.data.frame(tree$edge) %>%
rename(parent = V1, node = V2) %>%
left_join(node_data, by = "node") %>%
select(parent, node, bfb)
# Plot the tree with edges colored by child node's bfb value
re
ggtree(tree) %<+% node_data +
geom_edge(aes(color = factor(bfb)), size = 1.5) +
geom_tiplab(align = TRUE, linesize = .5) +
geom_nodelab(aes(label = label), size = 3, hjust = -0.1) +
scale_edge_color_manual(
values = c("0" = "blue", "1" = "red"),
na.value = "gray",
name = "BFB Value"
) +
theme(legend.position = "right") +
ggtitle("Tree with edges colored by child node's BFB value")
# Read the tree
tree <- read.tree(text = newick_tree)
# Convert to tidytree format for easier manipulation
tree_tidy <- as_tibble(tree)
# Extract bfb values for all nodes
tree_tidy <- tree_tidy %>%
mutate(
bfb = ifelse(
grepl("\\[&bfb=", label),
as.numeric(gsub(".*\\[&bfb=([01])\\].*", "\\1", label)),
NA
)
)
# Convert back to treedata format for ggtree
tree_data <- as.treedata(tree_tidy)
tree_data
tree_tidy
tree_tidy
# Read the tree
tree <- read.tree(text = newick_tree)
# Convert to tidytree format for easier manipulation
tree_tidy <- as_tibble(tree)
tree_tidy
# Extract bfb values for all nodes
tree_tidy <- tree_tidy %>%
mutate(
bfb = ifelse(
grepl("\\[&bfb=", label),
as.numeric(gsub(".*\\[&bfb=([01])\\].*", "\\1", label)),
NA
)
)
# Convert back to treedata format for ggtree
tree_data <- as.treedata(tree_tidy)
tree_data
# Plot the tree with edges colored by child node's bfb value
ggtree(tree_data, aes(color = factor(bfb)), size = 1.5) +
geom_tiplab(align = TRUE, linesize = .5) +
geom_nodelab(aes(label = label), size = 3, hjust = -0.1) +
scale_color_manual(
values = c("0" = "blue", "1" = "red"),
na.value = "gray",
name = "BFB Value"
) +
theme(legend.position = "right") +
ggtitle("Tree with edges colored by child node's BFB value")
require(tidytree)
# Convert back to treedata format for ggtree
tree_data <- as.treedata(tree_tidy)
# Plot the tree with edges colored by child node's bfb value
ggtree(tree_data, aes(color = factor(bfb)), size = 1.5) +
geom_tiplab(align = TRUE, linesize = .5) +
geom_nodelab(aes(label = label), size = 3, hjust = -0.1) +
scale_color_manual(
values = c("0" = "blue", "1" = "red"),
na.value = "gray",
name = "BFB Value"
) +
theme(legend.position = "right") +
ggtitle("Tree with edges colored by child node's BFB value")
# Read the tree
tree <- read.tree(text = newick_tree)
tree_data <- as_tibble(tree) %>%
mutate(
# Extract clean label name (without bfb info)
clean_label = str_remove(label, "\\[&bfb=[01]\\]"),
# Extract bfb value
bfb = as.numeric(str_extract(label, "(?<=\\[&bfb=)[01](?=\\])"))
)
tree_data
as_tibble(tree)
