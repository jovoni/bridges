)
}
# Convert to phylo object
phylo_tree <- list_to_phylo(clade_ancestor)
phylo_tree
clade_ancestor
# Initialize edge matrix and tip labels
edge <- matrix(nrow = 0, ncol = 2)
edge.length <- numeric()
tip.labels <- character()
node.labels <- character()
next_node <- 1
# Recursive function to traverse the tree
traverse <- function(clade, parent_node = NULL) {
nonlocal <- function(name, value) assign(name, value, envir = parent.frame(2))
if (is.null(parent_node)) {
# Root node
node_number <- next_node
nonlocal("next_node", next_node + 1)
nonlocal("node.labels", c(node.labels, clade$name))
for (child in clade$children) {
traverse(child, node_number)
}
} else {
# Internal or terminal node
node_number <- next_node
nonlocal("next_node", next_node + 1)
# Add edge
nonlocal("edge", rbind(edge, c(parent_node, node_number)))
if (!is.null(clade$edge.length)) {
nonlocal("edge.length", c(edge.length, clade$edge.length))
} else {
nonlocal("edge.length", c(edge.length, 0))
}
if (is.null(clade$children)) {
# Terminal node (tip)
nonlocal("tip.labels", c(tip.labels, clade$name))
} else {
# Internal node
nonlocal("node.labels", c(node.labels, clade$name))
for (child in clade$children) {
traverse(child, node_number)
}
}
}
}
traverse(clade)
clade
rm(list = ls())
library(tidyverse)
source("../bridges_material/functions_for_tree_algorithm/bfb_detection.R")
source("../bridges_material/functions_for_tree_algorithm/compute_distance_matrix.R")
source("../bridges_material/functions_for_tree_algorithm/distance_functions.R")
source("../bridges_material/functions_for_tree_algorithm/main.R")
source("../bridges_material/functions_for_tree_algorithm/neighbour_joining.R")
#source("../bridges_material/functions_for_tree_algorithm/nj.R")
source("../bridges_material/functions_for_tree_algorithm/preprocess_input.R")
source("../bridges_material/medicc2_utils/preprocess_data.R")
source("../bridges_material/compare_methods/utils_comparisons.R")
require(ComplexHeatmap)
library(dplyr)
library(data.table)
sim_metadata = readRDS("sim_metadata.rds")
find_greedy_distance <<- find_greedy_distance_with_steps
find_greedy_distance_with_avg <<- find_greedy_distance_A_contig
i = 1
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
bridges_tree = ape::read.tree(text = to_newick(neighbor_joining(fit$D)))
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
bridges_tree = ape::njs(fit$D)
sim_info
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
bridges_tree = ape::read.tree(text = to_newick(neighbor_joining(fit$D)))
bridges_tree = ape::njs(fit$D)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
bridges_tree = ape::read.tree(text = to_newick(neighbor_joining(fit$D)))
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
bridges_tree = ape::njs(fit$D)
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
bridges_tree = ape::fastme.bal(fit$D)
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
bridges_tree = ape::nj(text = to_newick(neighbor_joining(fit$D)))
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
bridges_tree = ape::nj(fit$D)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges")
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
compare_df = dplyr::bind_rows(
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges"),
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
)
compare_df
plot(medicc_tree, show.tip.label = F)
plot(bridges_tree, show.tip.label = F)
plot(medicc_tree, show.tip.label = F)
plot(bridges_tree, show.tip.label = F)
read_medicc_distances = function(sim_id) {
df = read.delim(paste0("test_data/",sim_id,"/medicc_input_pairwise_distances.tsv"),
sep = "\t", row.names = 1, check.names = FALSE)
mat = as.matrix(df)
if ("diploid" %in% colnames(mat)) {
mat = mat[rownames(mat) != "diploid", colnames(mat) != "diploid"]
}
}
bridges_dists = fit$D
medicc_dists = read_medicc_distances(sim_id)
medicc_dists
cell_order = colnames(fit$D)
bridges_dists = fit$D
cell_order = colnames(bridges_dists)
medicc_dists = read_medicc_distances(sim_id)
medicc_dists = medicc_dists[cell_order, cell_order]
image(t(bridges_dists))
image(t(medicc_dists))
image(t(bridges_dists))
image(t(medicc_dists))
image(t(bridges_dists))
image(t(medicc_dists))
plot(c(bridges_dists), c(medicc_dists))
i = 2
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
sim_info
sim_metadata
i = 3
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
bridges_tree = ape::nj(fit$D)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
compare_df = dplyr::bind_rows(
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges"),
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
)
read_medicc_distances = function(sim_id) {
df = read.delim(paste0("test_data/",sim_id,"/medicc_input_pairwise_distances.tsv"),
sep = "\t", row.names = 1, check.names = FALSE)
mat = as.matrix(df)
if ("diploid" %in% colnames(mat)) {
mat = mat[rownames(mat) != "diploid", colnames(mat) != "diploid"]
}
}
bridges_dists = fit$D
cell_order = colnames(bridges_dists)
compare_df
bridges_tree = ape::fastme.bal(fit$D)
compare_df = dplyr::bind_rows(
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges"),
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
)
compare_df
bridges_tree = ape::fastme.ols(fit$D)
compare_df = dplyr::bind_rows(
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges"),
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
)
compare_df
read_medicc_distances = function(sim_id) {
df = read.delim(paste0("test_data/",sim_id,"/medicc_input_pairwise_distances.tsv"),
sep = "\t", row.names = 1, check.names = FALSE)
mat = as.matrix(df)
if ("diploid" %in% colnames(mat)) {
mat = mat[rownames(mat) != "diploid", colnames(mat) != "diploid"]
}
}
bridges_dists = fit$D
cell_order = colnames(bridges_dists)
medicc_dists = read_medicc_distances(sim_id)
medicc_dists = medicc_dists[cell_order, cell_order]
image(t(bridges_dists))
image(t(medicc_dists))
plot(c(bridges_dists), c(medicc_dists))
bridges_tree = ape::read.tree(text = to_newick(neighbor_joining(fit$D)))
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
compare_df = dplyr::bind_rows(
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges"),
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
)
compare_df
bridges_tree = ape::nj(fit$D)
compare_df = dplyr::bind_rows(
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges"),
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
)
compare_df
bridges_tree = ape::njs(fit$D)
compare_df = dplyr::bind_rows(
get_tree_metrics(bridges_tree, sim$tree) %>% dplyr::mutate(algorithm = "bridges"),
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc")
)
compare_df
bench::mark(ape::njs(fit$D))
bench::mark(ape::read.tree(text = to_newick(neighbor_joining(fit$D))))
sim_id
tree_functions = list(
"fastme.bal.TT" = function(X) {ape::fastme.bal(X, nni = T, spr = T)},
"fastme.ols.T" = function(X) {ape::fastme.ols(X, nni=T)},
"nj" = function(X) {ape::nj(X)},
"my_nj" = function(X) {ape::read.tree(text = to_newick(neighbor_joining(X)))}
)
lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
})
lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .)
lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .) %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric)
lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .) %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_grid(~metric)
lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .) %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_grid(~metric, scales = "free_y")
lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .) %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
comparison_df = lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .) %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
comparison_df = lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
comparison_df = dplyr::bind_rows(comparison_df,
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc"))
comparison_df %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
i = 1
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
comparison_df = lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
comparison_df = dplyr::bind_rows(comparison_df,
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc"))
comparison_df %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
i = 2
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
comparison_df = lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
comparison_df = dplyr::bind_rows(comparison_df,
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc"))
comparison_df %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
rm(list = ls())
sim = bridge_sim(initial_cells = 1, normal_dup_rate = 0, amp_rate = amp_rate,
del_rate = del_rate, bfb_prob = bfb_prob, max_cells = ncells, max_time = Inf)
rm(list = ls())
sim = bridge_sim(initial_cells = 1, normal_dup_rate = 0, amp_rate = 2,
del_rate = 1, bfb_prob = 1, max_cells = ncells, max_time = Inf)
sim = bridge_sim(initial_cells = 1, normal_dup_rate = 0, amp_rate = 2,
del_rate = 1, bfb_prob = 1, max_cells = 128, max_time = Inf)
setwd("~/Github/bridges")
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
usethis::use_package("RColorBrewer")
usethis::use_package("tibble")
usethis::use_package("seriation")
devtools::document()
devtools::check()
devtools::douc
devtools::document()
devtools::check()
devtools::document()
devtools::check()
sim = bridge_sim()
devtools::document()
devtools::load_all()
sim = bridge_sim()
usethis::use_package("dplyr")
plot_heatmap(data = sim$cna_data)
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data)
plot_heatmap(data = sim$cna_data)
devtools::load_all()
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data)
devtools::load_all()
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data)
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data)
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data)
shiny::runApp('~/Github/bridges_material/ecdna_bfb_detection')
setwd("~/Github/medicc_bridges_comparison")
rm(list = ls())
library(tidyverse)
source("../bridges_material/functions_for_tree_algorithm/bfb_detection.R")
source("../bridges_material/functions_for_tree_algorithm/compute_distance_matrix.R")
source("../bridges_material/functions_for_tree_algorithm/distance_functions.R")
source("../bridges_material/functions_for_tree_algorithm/main.R")
source("../bridges_material/functions_for_tree_algorithm/neighbour_joining.R")
#source("../bridges_material/functions_for_tree_algorithm/nj.R")
source("../bridges_material/functions_for_tree_algorithm/preprocess_input.R")
source("../bridges_material/medicc2_utils/preprocess_data.R")
source("../bridges_material/compare_methods/utils_comparisons.R")
require(ComplexHeatmap)
library(dplyr)
library(data.table)
sim_metadata = readRDS("sim_metadata.rds")
find_greedy_distance <<- find_greedy_distance_with_steps
find_greedy_distance_with_avg <<- find_greedy_distance_A_contig
tree_functions = list(
"fastme.bal.TT" = function(X) {ape::fastme.bal(X, nni = T, spr = T)},
"fastme.ols.T" = function(X) {ape::fastme.ols(X, nni=T)},
"nj" = function(X) {ape::nj(X)},
"my_nj" = function(X) {ape::read.tree(text = to_newick(neighbor_joining(X)))}
)
i = 2
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
comparison_df = lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
comparison_df = dplyr::bind_rows(comparison_df,
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc"))
comparison_df %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
i = 1
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
comparison_df = lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
comparison_df = dplyr::bind_rows(comparison_df,
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc"))
comparison_df %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
i = 3
sim_info = sim_metadata[i,]
sim_id = sim_info$sim_id
sim = readRDS(file.path("test_data", sim_id, "sim.RDS"))
fit = readRDS(file.path("test_data", sim_id, "fit.RDS"))
comparison_df = lapply(names(tree_functions), function(tf) {
t = tree_functions[[tf]](fit$D)
get_tree_metrics(t, sim$tree) %>% dplyr::mutate(algorithm = tf)
}) %>% do.call("bind_rows", .)
medicc_tree = ape::read.tree(paste0("test_data/",sim_id,"/medicc_input_final_tree.new"))
comparison_df = dplyr::bind_rows(comparison_df,
get_tree_metrics(medicc_tree, sim$tree) %>% dplyr::mutate(algorithm = "medicc"))
comparison_df %>%
ggplot(mapping = aes(x = metric, y=value, fill=algorithm)) +
geom_col(position = "dodge") +
facet_wrap(~metric, scales = "free_y")
devtools::document()
setwd("~/Github/bridges")
devtools::document()
devtools::load_all()
sim = bridge_sim(max_cells = 60)
plot_heatmap(data = sim$cna_data)
devtools::check()
res = main(sim$cna_data, alleles = c("A", "B"), k_jitter_fix = 0, tree_func = ape::fastme.ols)
devtools::document()
devtools::load_all()
res = main(sim$cna_data, alleles = c("A", "B"), k_jitter_fix = 0, tree_func = ape::fastme.ols)
plot_heatmap(data = sim$cna_data, tree = res$tree)
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data, tree = res$tree)
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data, tree = res$tree)
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data, tree = res$tree)
devtools::document()
devtools::load_all()
plot_heatmap(data = sim$cna_data, tree = res$tree)
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
usethis::use_package("stats")
devtools::document()
devtools::load_all()
devtools::check()
usethis::use_package("ComplexHeatmap")
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
